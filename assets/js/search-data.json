{
  
    
        "post0": {
            "title": "Version control and Github",
            "content": "Version control and Github .",
            "url": "https://nu-cem.github.io/CompPhys/version%20control/unix/2021/08/02/Version_control.html",
            "relUrl": "/version%20control/unix/2021/08/02/Version_control.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Sharing your code",
            "content": "",
            "url": "https://nu-cem.github.io/CompPhys/documentation/testing/2021/08/02/Sharing_code.html",
            "relUrl": "/documentation/testing/2021/08/02/Sharing_code.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Python scripts and the Unix terminal",
            "content": "Python scripts and the Unix terminal .",
            "url": "https://nu-cem.github.io/CompPhys/mathematics/numerical%20recipes/2021/08/02/Scripting.html",
            "relUrl": "/mathematics/numerical%20recipes/2021/08/02/Scripting.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Python basics - part two",
            "content": "Python basics - part two .",
            "url": "https://nu-cem.github.io/CompPhys/markdown/2021/08/02/Python_basics_two.html",
            "relUrl": "/markdown/2021/08/02/Python_basics_two.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Python basics - part one",
            "content": "This lesson is an introduction to programming in Python for people with little or no previous programming experience. It uses plotting UV-Vis data as its motivating example. This lesson references the Jupyter Notebook, but can be followed using a regular Python interpreter as well. Please note that this lesson, like all others in the course, uses Python 3 rather than Python 2. . Before you begin . Check that Python is installed: please see the setup instructions for details. | Download the UV-Vis data: UVVis-01.csv | Launch a Jupyter notebook: open Git Bash (Windows) or a terminal (Mac) and type jupyter notebook | . . You should launch the Jupyter Notebook in the folder where you want to save your notebook files. You can find this folder using the Unix commands `cd` (change directory) and `pwd` (print working directory). We will learn more about Unix later in the course. Lesson outline . Topic Questions . Running Python | How can I run Python programs? | . Variables and Assignment | How can I store data in programs? | . Data Types and Type Conversion | What kinds of data do programs store? How can I convert one type to another? | . Built-in Functions, Help and Errors | How can I use built-in functions? How can I find out what they do? What kind of errors can occur in programs? | . Lists | How can I store multiple values? | . Resources . Presentation | Teaching notes | Exercises | .",
            "url": "https://nu-cem.github.io/CompPhys/python/2021/08/02/Python_basics_one.html",
            "relUrl": "/python/2021/08/02/Python_basics_one.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Plotting with Python",
            "content": "Plotting with Python .",
            "url": "https://nu-cem.github.io/CompPhys/data/python/2021/08/02/Plotting.html",
            "relUrl": "/data/python/2021/08/02/Plotting.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Modelling with Partial Differential Equations",
            "content": "Modelling with Partial Differential Equations .",
            "url": "https://nu-cem.github.io/CompPhys/mathematics/numerical%20recipes/2021/08/02/PDEs.html",
            "relUrl": "/mathematics/numerical%20recipes/2021/08/02/PDEs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Open science",
            "content": "Open science .",
            "url": "https://nu-cem.github.io/CompPhys/unix/github/2021/08/02/Open_science.html",
            "relUrl": "/unix/github/2021/08/02/Open_science.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Modelling with Ordinary Differential Equations",
            "content": "Modelling with Ordinary Differential Equations .",
            "url": "https://nu-cem.github.io/CompPhys/mathematics/numerical%20recipes/2021/08/02/ODEs.html",
            "relUrl": "/mathematics/numerical%20recipes/2021/08/02/ODEs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Introduction and Setup",
            "content": "Introduction . Computing has become central to virtually all research and development in academia and industry, and with the advent of Machine Learning and High-Performance Computing this dominance is set to continue. . Computational physics encompasses a wide number of areas including materials modelling, particle physics simulations, protein structure prediction and plasma modelling. In fact, it is possible to find a computational branch for every major field in physics. . The focus of this course is to equip with you with the transferable skills needed for success in a range of computational disciplines. . The software packages we will introduce in the first part of the course, Getting started, are applicable to all areas of research and industry - from game design to architecture. In the middle section of the course, Getting results, we will apply these tools to model the differential equations that are so central to both classical and quantum physics. In the final section of the course, Getting it out there, we will use modern software engineering techniques to document, test and share our code. . This course is split into three sections - Getting started, Getting results and Getting it out there. . Getting started Python part one | Python part two | Data analysis | Plotting | . | Getting results Modelling with partial differential equations | Modelling with ordinary differential equations | . | Getting it out there Python scripts and the Unix terminal | Testing and documentation | Version control and Github | Open science and build-your-own website | . | . . Warning: Setup . To participate in this course you will need access to the following software: Python, Bash, Git and Jupyter. To install this software on your personal laptop or desktop carefully follow the instructions listed below. . You will also need a user account at github.com - Basic GitHub accounts are free. . . All of the software needed for this course is pre-installed in the MPEE computers at Northumbria University . Warning: Python . [Python][python] is a popular language for scientific computing, and great for general-purpose programming as well. Installing all of its scientific packages individually can be a bit difficult, however, so we recommend the all-in-one installer [Anaconda][anaconda]. Please make sure you install Python version 3.x (e.g., 3.4 is fine). . Windows - [Video tutorial] . Open [https://www.anaconda.com/download] with your web browser. . | Download the Python 3 installer for Windows. . | Double-click the executable and install Python 3 using MOST of the default settings, the only exception is to check Add Anaconda to my PATH environment variable. . | Mac OS X - [Video tutorial] . Open [https://www.anaconda.com/download] with your web browser. . | Download the Python 3 installer for OS X. . | Install Python 3 using all of the defaults for installation. . | Bash and Git . Bash is a commonly-used shell that gives you the power to do simple tasks more quickly. Git is version-control software that allows to you to develop code more efficiently and share a public version of your code on github.com. In fact, this website is built using Bash, Git and github.com (amongst other tools) - the code can be found here. You can download both tools at the same time following the instructions below. . Windows - video tutorial . Download the Git for Windows installer . | Run the installer and follow the steps below: . a) Click on “Next” four times (two times if you’ve previously installed Git). You don’t need to change anything in the Information, location, components, and start menu screens. . b) Select “Use the nano editor by default” and click on “Next”. . c) Keep “Use Git from the command line and…” selected and click on “Next”. If you forgot to do this programs that you need for the workshop will not work properly. If this happens rerun the installer and select the appropriate option. . d) Click on “Next” . e) Keep “Checkout Windows-style, commit Unix-style line endings” selected and click on “Next”. . f) Select “Use Windows’ default console window” and click on “Next”. . g) Ensure that “Default (fast-forward or merge) is selected and click “Next” . h) Ensure that “Git Credential Manager Core” is selected and click on “Next”. . i) Ensure that “Enable file system caching” is selected and click on “Next”. . j) Click on “Install” . k) Click on “Finish” . | If your “HOME” environment variable is not set (or you don’t know what this is): . a) Open command prompt (Open Start Menu then type cmd and press [Enter]) . b) Type the following line into the command prompt window exactly as shown: setx HOME &quot;%USERPROFILE%&quot; . c) Press [Enter], you should see SUCCESS: Specified value was saved. . | d) Quit command prompt by typing exit then pressing [Enter] . This will provide you with both Git and Bash in the Git Bash program. . macOS . For macOS, install Git for Mac by downloading and running the most recent “mavericks” installer from this list. Because this installer is not signed by the developer, you may have to right click (control click) on the .pkg file, click Open, and click Open on the pop up window. After installing Git, there will not be anything in your /Applications folder, as Git is a command line program. For older versions of OS X (10.5-10.8) use the most recent available installer labelled “snow-leopard” available here. . See the Git installation video tutorial for an example on how to open the Terminal. . Jupyter . We will teach Python using the [Jupyter notebook][jupyter], a programming environment that runs in a web browser. Jupyter requires a reasonably up-to-date browser, preferably a current version of Chrome, Safari, or Firefox (note that Internet Explorer version 9 and below are not supported). Jupyter was installed as part of the Anaconda package for Python. . Test your Setup . To check that this software has installed correctly, open Git bash (or terminal) and type the command: . $ jupyter notebook . You should see a file browser pop up as a new tab on your browser. Select new and you should see Python 3 listed as an option. Clicking on this will create a new Python 3 notebook file. . To start the Python interpreter without the notebook, you can open a terminal or Git Bash and type the command: . $ python .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Introduction.html",
            "relUrl": "/2021/08/02/Introduction.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Data analysis",
            "content": "Data analysis .",
            "url": "https://nu-cem.github.io/CompPhys/data/python/2021/08/02/Data_analysis.html",
            "relUrl": "/data/python/2021/08/02/Data_analysis.html",
            "date": " • Aug 2, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This website contains resources for the second year course “Theory, computation and experiment” (KD5081) at Northumbria University, UK. The resources have been developed by Dr Lucy Whalley and the website is powered by Github and fastpages which is licensed under Apache License 2.0. . The content of this website is derived, with permission, from several other sources: . Software Carpentry (in particular, Introduction and Setup) | Code Refinery | . The content of this website is licensed under a Creative Commons Attribution 4.0 International License. You can re-use any of its content as long as the following attribution is included, and you indicate if changes were made. .",
          "url": "https://nu-cem.github.io/CompPhys/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nu-cem.github.io/CompPhys/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}