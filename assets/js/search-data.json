{
  
    
        "post0": {
            "title": "Title",
            "content": "https://arxiv.org/vc/arxiv/papers/1302/1302.4996v1.pdf . https://web.tuat.ac.jp/~yamanaka/pcoms2019/Cahn-Hilliard-2d.html . More than one way to crack an egg! . Analytical solutions such as the integrating factor method outlined here, or the numerical approaches which we will discuss. .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/03/ODEPDEnotes.html",
            "relUrl": "/2021/08/03/ODEPDEnotes.html",
            "date": " • Aug 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Writing functions - quick test",
            "content": "Identifying Syntax Errors . Read the code below and try to identify what the errors are without running it. | Run the code and read the error message. Is it a SyntaxError or an IndentationError? | Fix the error. | Repeat steps 2 and 3 until you have fixed all the errors. | def another_function print(&quot;Syntax errors are annoying.&quot;) print(&quot;But at least python tells us about them!&quot;) print(&quot;So they are usually not too hard to fix.&quot;) . Solution . def another_function(): print(&quot;Syntax errors are annoying.&quot;) print(&quot;But at least Python tells us about them!&quot;) print(&quot;So they are usually not too hard to fix.&quot;) . Definition and Use . What does the following program print? . def report(pressure): print(&#39;pressure is&#39;, pressure) print(&#39;calling&#39;, report, 22.5) . Solution . calling &lt;function report at 0x7fd128ff1bf8&gt; 22.5 . A function call always needs parenthesis, otherwise you get memory address of the function object. So, if we wanted to call the function named report, and give it the value 22.5 to report on, we could have our function call as follows . print(&quot;calling&quot;) report(22.5) . Order of Operations . The example above: . result = print_date(1871, 3, 19) print(&#39;result of call is:&#39;, result) . printed: . 1871/3/19 result of call is: None . Explain why the two lines of output appeared in the order they did. . What’s wrong in this example? . result = print_date(1871,3,19) def print_date(year, month, day): joined = str(year) + &#39;/&#39; + str(month) + &#39;/&#39; + str(day) print(joined) . Solution . The first line of output (1871/3/19) is from the print function inside print_date(), while the second line is from the print function below the function call. All of the code inside print_date() is executed first, and the program then “leaves” the function and executes the rest of the code. | The problem with the example is that the function is defined after the call to the function is made. Python therefore doesn’t understand the function call. | Find the First . Fill in the blanks to create a function that takes a list of numbers as an argument and returns the first negative value in the list. What does your function do if the list is empty? . def first_negative(values): for v in ____: if ____: return ____ . Solution . def first_negative(values): for v in values: if v&lt;0: return v . If an empty list is passed to this function, it returns None: . my_list = [] print(first_negative(my_list) . None . Calling by Name . Earlier we saw this function: . def print_date(year, month, day): joined = str(year) + &#39;/&#39; + str(month) + &#39;/&#39; + str(day) print(joined) . We saw that we can call the function using named arguments, like this: . print_date(day=1, month=2, year=2003) . What does print_date(day=1, month=2, year=2003) print? | When and why is it useful to call functions this way? | Solution . 2003/2/1 | Using named arguments can make code more readable since one can see from the function call what name the different arguments have inside the function. It can also reduce the chances of passing arguments in the wrong order, since by using named arguments the order doesn’t matter. | Encapsulate of If/Print Block . The code below will run on a label-printer for chicken eggs. A digital scale will report a chicken egg mass (in grams) to the computer and then the computer will print a label. . Please re-write the code so that the if-block is folded into a function. . import random for i in range(10): # simulating the mass of a chicken egg # the (random) mass will be 70 +/- 20 grams mass=70+20.0*(2.0*random.random()-1.0) print(mass) #egg sizing machinery prints a label if(mass&gt;=85): print(&quot;jumbo&quot;) elif(mass&gt;=70): print(&quot;large&quot;) elif(mass&lt;70 and mass&gt;=55): print(&quot;medium&quot;) else: print(&quot;small&quot;) . The simplified program follows. What function definition will make it functional? . # revised version import random for i in range(10): # simulating the mass of a chicken egg # the (random) mass will be 70 +/- 20 grams mass=70+20.0*(2.0*random.random()-1.0) print(mass,print_egg_label(mass)) . Create a function definition for print_egg_label() that will work with the revised program above. Note, the function’s return value will be significant. Sample output might be 71.23 large. | A dirty egg might have a mass of more than 90 grams, and a spoiled or broken egg will probably have a mass that’s less than 50 grams. Modify your print_egg_label() function to account for these error conditions. Sample output could be 25 too light, probably spoiled. | Solution . def print_egg_label(mass): #egg sizing machinery prints a label if(mass&gt;=90): return(&quot;warning: egg might be dirty&quot;) elif(mass&gt;=85): return(&quot;jumbo&quot;) elif(mass&gt;=70): return(&quot;large&quot;) elif(mass&lt;70 and mass&gt;=55): return(&quot;medium&quot;) elif(mass&lt;50): return(&quot;too light, probably spoiled&quot;) else: return(&quot;small&quot;) . Simulating a dynamical system . In mathematics, a dynamical system is a system in which a function describes the time dependence of a point in a geometrical space. A canonical example of a dynamical system is a system called the logistic map. . Define a function called logistic_map that takes two inputs: x, representing the state of the system at time t, and a parameter r. This function should return a value representing the state of the system at time t+1. . | Using a for loop, iterate the logistic_map function defined in part 1 starting from an initial condition of 0.5 for t_final=10, 100, and 1000 periods. Store the intermediate results in a list so that after the for loop terminates you have accumulated a sequence of values representing the state of the logistic map at time t=0,1,…,t_final. . | Encapsulate the logic of your for loop into a function called iterate that takes the initial condition as its first input, the parameter t_final as its second input and the parameter r as its third input. The function should return the list of values representing the state of the logistic map at time t=0,1,…,t_final. . | Solution . 1. . def logistic_map(x, r): return r * x * (1 - x) . 2. . initial_condition = 0.5 t_final = 10 r = 1.0 trajectory = [initial_condition] for t in range(1, t_final): trajectory[t] = logistic_map(trajectory[t-1], r) . 3. . def iterate(initial_condition, t_final, r): trajectory = [initial_condition] for t in range(1, t_final): trajectory[t] = logistic_map(trajectory[t-1], r) return trajectorys . Show answer . See the notebook. . Back to Python part two. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Writing-Functions-Qs.html",
            "relUrl": "/2021/08/02/Writing-Functions-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Version control and Github",
            "content": "Version control and Github .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Version_control.html",
            "relUrl": "/2021/08/02/Version_control.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Variable scope - quick test",
            "content": "Local and Global Variable Use . Trace the values of all variables in this program as it is executed. (Use ‘—’ as the value of variables before and after they exist.) . limit = 100 def clip(value): return min(max(0.0, value), limit) value = -22.5 print(clip(value)) . Reading Error Messages . Read the traceback below, and identify the following: . How many levels does the traceback have? | What is the file name where the error occurred? | What is the function name where the error occurred? | On which line number in this function did the error occurr? | What is the type of error? | What is the error message? | KeyError Traceback (most recent call last) &lt;ipython-input-2-e4c4cbafeeb5&gt; in &lt;module&gt;() 1 import errors_02 -&gt; 2 errors_02.print_friday_message() /Users/ghopper/thesis/code/errors_02.py in print_friday_message() 13 14 def print_friday_message(): &gt; 15 print_message(&quot;Friday&quot;) /Users/ghopper/thesis/code/errors_02.py in print_message(day) 9 &quot;sunday&quot;: &quot;Aw, the weekend is almost over.&quot; 10 } &gt; 11 print(messages[day]) 12 13 KeyError: &#39;Friday&#39; . Show answer Three levels. | errors_02.py | print_message | Line 11 | KeyError. These errors occur when we are trying to look up a key that does not exist (usually in a data structure such as a dictionary). We can find more information about the KeyError and other built-in exceptions in the Python docs. | KeyError: &#39;Friday&#39; | . See the notebook. . Back to Python part two. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Variable-Scope-Qs.html",
            "relUrl": "/2021/08/02/Variable-Scope-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Documentation and testing",
            "content": "",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Sharing_code.html",
            "relUrl": "/2021/08/02/Sharing_code.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Setup",
            "content": "To participate in this course you will need access to the following software: Python, Bash, Git and Jupyter. To install this software on your personal laptop or desktop carefully follow the instructions listed below. . You will also need a user account at github.com - Basic GitHub accounts are free. . . All of the software needed for this course is pre-installed in the MPEE computers at Northumbria University . You can also run the Python Jupyter Notebook files remotely through the [binder] or [colab] services whenever you see an icon (e.g. like those at the top of [this page]()). But be warned! Any changes you make are not saved and the service can time-out after a period of inactivity (usually ~20 minutes). Python . [Python][python] is a popular language for scientific computing, and great for general-purpose programming as well. Installing all of its scientific packages individually can be a bit difficult, however, so we recommend the all-in-one installer [Anaconda][anaconda]. Please make sure you install Python version 3.x (e.g., 3.4 is fine). . Windows - [Video tutorial] . Open [https://www.anaconda.com/download] with your web browser. . | Download the Python 3 installer for Windows. . | Double-click the executable and install Python 3 using MOST of the default settings, the only exception is to check Add Anaconda to my PATH environment variable. . | Mac OS X - [Video tutorial] . Open [https://www.anaconda.com/download] with your web browser. . | Download the Python 3 installer for OS X. . | Install Python 3 using all of the defaults for installation. . | Bash and Git . Bash is a commonly-used shell that gives you the power to do simple tasks more quickly. Git is version-control software that allows to you to develop code more efficiently and share a public version of your code on github.com. In fact, this website is built using Bash, Git and github.com (amongst other tools) - the code can be found here. You can download both tools at the same time following the instructions below. . Windows - video tutorial . Download the Git for Windows installer . | Run the installer and follow the steps below: . a) Click on “Next” four times (two times if you’ve previously installed Git). You don’t need to change anything in the Information, location, components, and start menu screens. . b) Select “Use the nano editor by default” and click on “Next”. . c) Keep “Use Git from the command line and…” selected and click on “Next”. If you forgot to do this programs that you need for the workshop will not work properly. If this happens rerun the installer and select the appropriate option. . d) Click on “Next” . e) Keep “Checkout Windows-style, commit Unix-style line endings” selected and click on “Next”. . f) Select “Use Windows’ default console window” and click on “Next”. . g) Ensure that “Default (fast-forward or merge) is selected and click “Next” . h) Ensure that “Git Credential Manager Core” is selected and click on “Next”. . i) Ensure that “Enable file system caching” is selected and click on “Next”. . j) Click on “Install” . k) Click on “Finish” . | If your “HOME” environment variable is not set (or you don’t know what this is): . a) Open command prompt (Open Start Menu then type cmd and press [Enter]) . b) Type the following line into the command prompt window exactly as shown: setx HOME &quot;%USERPROFILE%&quot; . c) Press [Enter], you should see SUCCESS: Specified value was saved. . | d) Quit command prompt by typing exit then pressing [Enter] . This will provide you with both Git and Bash in the Git Bash program. . macOS . For macOS, install Git for Mac by downloading and running the most recent “mavericks” installer from this list. Because this installer is not signed by the developer, you may have to right click (control click) on the .pkg file, click Open, and click Open on the pop up window. After installing Git, there will not be anything in your /Applications folder, as Git is a command line program. For older versions of OS X (10.5-10.8) use the most recent available installer labelled “snow-leopard” available here. . See the Git installation video tutorial for an example on how to open the Terminal. . Jupyter . We will teach Python using the [Jupyter notebook][jupyter], a programming environment that runs in a web browser. Jupyter requires a reasonably up-to-date browser, preferably a current version of Chrome, Safari, or Firefox (note that Internet Explorer version 9 and below are not supported). Jupyter was installed as part of the Anaconda package for Python. . Launch a Jupyter Notebook . To check that this software has installed correctly, open Git bash (or terminal) and type the command: . $ jupyter notebook . You should launch the Jupyter Notebook in the folder where you want to save your notebook files. You can find this folder using the Unix commands cd (change directory) and pwd (print working directory). We will learn more about these commands in a the lesson Python scripts and the Unix terminal . You should see a file browser pop up as a new tab on your browser. Select new and you should see Python 3 listed as an option. Clicking on this will create a new Python 3 notebook file. . Start the command line Python interpreter . To start the Python interpreter without the notebook, you can open a terminal or Git Bash and type the command: . $ python .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Setup.html",
            "relUrl": "/2021/08/02/Setup.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Python scripts and the Unix terminal",
            "content": "Python scripts and the Unix terminal .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Scripting.html",
            "relUrl": "/2021/08/02/Scripting.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Python part two",
            "content": "This lesson is part two of an introduction to programming in Python for people with little or no previous programming experience. This lesson references the Jupyter Notebook, but can be followed using a regular Python interpreter as well. Please note that this lesson, like all others in the course, uses Python 3 rather than Python 2. . Before you begin . Check that Python and Jupyter Notebook are installed | Launch a Jupyter notebook | . Please see the Setup page for more details. . Lesson outline . Topic Objective Quick test . For loops | How can I make a program do many things? | :ram: | . Conditionals | How can programs do different things for different data? | :mouse: | . Writing functions | How can I create my own functions? | :palm_tree: | . Variable scope | How do function calls actually work? How can I determine where errors occurred? | :mushroom: | . Libraries | How can I use software that other people have written? How can I find out what that software does? | :cactus: | . Resources . Lesson exercises | Extension exercise | Presentation | Teaching notes | .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Python_basics_two.html",
            "relUrl": "/2021/08/02/Python_basics_two.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Python part one",
            "content": "This lesson is part one of an introduction to programming in Python for people with little or no previous programming experience. This lesson references the Jupyter Notebook, but can be followed using a regular Python interpreter as well. Please note that this lesson, like all others in the course, uses Python 3 rather than Python 2. . Before you begin . Check that Python and Jupyter Notebook are installed | Launch a Jupyter notebook | . Please see the Setup page for more details. . Lesson outline . Topic Objective Quick test . Running python | How can I run Python programs? | :running: | . Variables and assignment | How can I store data in programs? | :nail_care: | . Data types and type conversion | What kinds of data do programs store? How can I convert one type to another? | :dancer: | . Built-in functions, help and errors | How can I use built-in functions? How can I find out what they do? What kind of errors can occur in programs? | :droplet: | . Lists | How can I store multiple values? | :ear: | . Resources . Lesson exercises | Extension exercise | Presentation | Teaching notes | .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Python_basics_one.html",
            "relUrl": "/2021/08/02/Python_basics_one.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Plotting with Python",
            "content": "Plotting with Python .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Plotting.html",
            "relUrl": "/2021/08/02/Plotting.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Modelling Partial Differential Equations",
            "content": "https://en.wikipedia.org/wiki/Partial_differential_equation .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/PDEs.html",
            "relUrl": "/2021/08/02/PDEs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Open science",
            "content": "Open science .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Open_science.html",
            "relUrl": "/2021/08/02/Open_science.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "Modelling Ordinary Differential Equations",
            "content": "Broadly speaking, there are three ways to solve a differential equation: analytically, numerically (with a pre-existing function) or numerically (with a home-made function). Numerical approaches offer more flexibility but with the caveat that they are approximate and must be converged. . In this lesson we will use numerical approaches to solve ODE’s, but with a strong focus on home-made numerical functions, so that a greater understanding of the approximations and approaches (and a good chance to practice Python skills). .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/ODEs.html",
            "relUrl": "/2021/08/02/ODEs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "Lists",
            "content": ". Questions: . How can I store multiple values? | . Objectives: . Explain why programs need collections of values. | Write programs that create flat lists, index them, slice them, and modify them through assignment and method calls. | . Keypoints: . A list stores many values in a single structure. | Use an item&#39;s index to fetch it from a list. | Lists&#39; values can be replaced by assigning to them. | Appending items to a list lengthens it. | Use del to remove items from a list entirely. | The empty list contains no values. | Lists may contain values of different types. | Character strings can be indexed like lists. | Character strings are immutable. | Indexing beyond the end of the collection is an error. | . . A list stores many values in a single structure. . Doing calculations with a hundred variables called pressure_001, pressure_002, etc., would be at least as slow as doing them by hand. | Use a list to store many values together. Contained within square brackets [...]. | Values separated by commas ,. | . | Use len to find out how many values are in a list. | . pressures = [0.273, 0.275, 0.277, 0.275, 0.276] print(&#39;pressures:&#39;, pressures) print(&#39;length:&#39;, len(pressures)) . pressures: [0.273, 0.275, 0.277, 0.275, 0.276] length: 5 . Use an item&#39;s index to fetch it from a list. . Just like strings. | . print(&#39;zeroth item of pressures:&#39;, pressures[0]) print(&#39;fourth item of pressures:&#39;, pressures[4]) . zeroth item of pressures: 0.273 fourth item of pressures: 0.276 . Lists&#39; values can be replaced by assigning to them. . Use an index expression on the left of assignment to replace a value. | . pressures[0] = 0.265 print(&#39;pressures is now:&#39;, pressures) . pressures is now: [0.265, 0.275, 0.277, 0.275, 0.276] . Appending items to a list lengthens it. . Use list_name.append to add items to the end of a list. | . primes = [2, 3, 5] print(&#39;primes is initially:&#39;, primes) primes.append(7) primes.append(9) print(&#39;primes has become:&#39;, primes) . primes is initially: [2, 3, 5] primes has become: [2, 3, 5, 7, 9] . append is a method of lists. A method is like a function, but tied to a particular object. | Use object_name.method_name to call methods. | We will meet other methods of lists as we go along - you can use help(list) for a preview. | extend is similar to append, but it allows you to combine two lists. For example: | . teen_primes = [11, 13, 17, 19] middle_aged_primes = [37, 41, 43, 47] print(&#39;primes is currently:&#39;, primes) primes.extend(teen_primes) print(&#39;primes has now become:&#39;, primes) primes.append(middle_aged_primes) print(&#39;primes has finally become:&#39;, primes) . primes is currently: [2, 3, 5, 7, 9] primes has now become: [2, 3, 5, 7, 9, 11, 13, 17, 19] primes has finally become: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]] . Note that while extend maintains the &quot;flat&quot; structure of the list, appending a list to a list makes the result two-dimensional. . Use del to remove items from a list entirely. . del list_name[index] removes an item from a list and shortens the list. | Not a function or a method, but a statement in the language. | . print(&#39;primes before removing last item:&#39;, primes) del primes[4] print(&#39;primes after removing last item:&#39;, primes) . primes before removing last item: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]] primes after removing last item: [2, 3, 5, 7, 11, 13, 17, 19, [37, 41, 43, 47]] . The empty list contains no values. . Use [] on its own to represent a list that doesn&#39;t contain any values. &quot;The zero of lists.&quot; | . | Helpful as a starting point for collecting values (which we will see in the next episode). | . Lists may contain values of different types. . A single list may contain numbers, strings, and anything else. | . goals = [1, &#39;Create lists.&#39;, 2, &#39;Extract items from lists.&#39;, 3, &#39;Modify lists.&#39;] . Character strings can be indexed like lists. . Get single characters from a character string using indexes in square brackets. | . element = &#39;carbon&#39; print(&#39;zeroth character:&#39;, element[0]) print(&#39;third character:&#39;, element[3]) . zeroth character: c third character: b . Character strings are immutable. . Cannot change the characters in a string after it has been created. Immutable data types can&#39;t be changed after creation. | In contrast, lists are mutable: they can be modified in place. | . | Python considers the string to be a single value with parts, not a collection of values. | . element[0] = &#39;C&#39; . TypeError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11747/1676686116.py in &lt;module&gt; -&gt; 1 element[0] = &#39;C&#39; TypeError: &#39;str&#39; object does not support item assignment . Indexing beyond the end of the list or string is an error. . Python reports an IndexError if we attempt to access a value that doesn&#39;t exist. This is a kind of runtime error. | This cannot be detected as the code is parsed because the index might be calculated based on data. | . | . print(&#39;99th element of element is:&#39;, element[99]) . . Do the quick-test. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Lists.html",
            "relUrl": "/2021/08/02/Lists.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "Lists - quick test",
            "content": "Fill in the Blanks . Fill in the blanks so that the program below produces the output shown. . values = ____ values.____(1) values.____(3) values.____(5) print(&#39;first time:&#39;, values) values = values[____] print(&#39;second time:&#39;, values) . first time: [1, 3, 5] second time: [3, 5] . Show answer values = [] values.append(1) values.append(3) values.append(5) print(&#39;first time:&#39;, values) values = values[1:] print(&#39;second time:&#39;, values) . How Large is a Slice? . If ‘low’ and ‘high’ are both non-negative integers, how long is the list values[low:high]? . Show answer The list values[low:high] has high - low elements. For example, values[1:4] has the 3 elements values[1], values[2], and values[3]. Note that the expression will only work if high is less than the total length of the list values. . From Strings to Lists and Back . Given this: . print(&#39;string to list:&#39;, list(&#39;tin&#39;)) print(&#39;list to string:&#39;, &#39;&#39;.join([&#39;g&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;])) . [&#39;t&#39;, &#39;i&#39;, &#39;n&#39;] &#39;gold&#39; . Explain in simple terms what list(&#39;some string&#39;) does. | What does &#39;-&#39;.join([&#39;x&#39;, &#39;y&#39;]) generate? | Show answer list(&#39;some string&#39;) “splits” a string into a list of its characters. | x-y | Working With the End . What does the following program print? . element = &#39;helium&#39; print(element[-1]) . How does Python interpret a negative index? | If a list or string has N elements, what is the most negative index that can safely be used with it, and what location does that index represent? | If values is a list, what does del values[-1] do? | How can you display all elements but the last one without changing values? (Hint: you will need to combine slicing and negative indexing.) | Show answer The program prints m. . Python interprets a negative index as starting from the end (as opposed to starting from the beginning). The last element is -1. | The last index that can safely be used with a list of N elements is element -N, which represents the first element. | del values[-1] removes the last element from the list. | values[:-1] | Stepping Through a List . What does the following program print? . element = &#39;fluorine&#39; print(element[::2]) print(element[::-1]) . If we write a slice as low:high:stride, what does stride do? | What expression would select all of the even-numbered items from a collection? | Show answer The program prints . furn eniroulf . stride is the step size of the slice | The slice 1::2 selects all even-numbered items from a collection: it starts with element 1 (which is the second element, since indexing starts at 0), goes on until the end (since no end is given), and uses a step size of 2 (i.e., selects every second element). | Copying (or Not) . What do these two programs print? In simple terms, explain the difference between new = old and new = old[:]. . # Program A old = list(&#39;gold&#39;) new = old # simple assignment new[0] = &#39;D&#39; print(&#39;new is&#39;, new, &#39;and old is&#39;, old) . # Program B old = list(&#39;gold&#39;) new = old[:] # assigning a slice new[0] = &#39;D&#39; print(&#39;new is&#39;, new, &#39;and old is&#39;, old) . Show answer Program A prints . &gt; &gt; new is [&#39;D&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;] and old is [&#39;D&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;] . Program B prints . &gt; &gt; new is [&#39;D&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;] and old is [&#39;g&#39;, &#39;o&#39;, &#39;l&#39;, &#39;d&#39;] . new = old makes new a reference to the list old; new and old point towards the same object. . new = old[:] however creates a new list object new containing all elements from the list old; new and old are different objects. . . See the notebook. . Back to Python basics - part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Lists-Qs.html",
            "relUrl": "/2021/08/02/Lists-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "Libraries - quick test",
            "content": "Exploring the Math Module . What function from the math module can you use to calculate a square root without using sqrt? | Since the library contains this function, why does sqrt exist? | Solution . Using help(math) we see that we’ve got pow(x,y) in addition to sqrt(x), so we could use pow(x, 0.5) to find a square root. | The sqrt(x) function is arguably more readable than pow(x, 0.5) when implementing equations. Readability is a cornerstone of good programming, so it makes sense to provide a special function for this specific common case. . Also, the design of Python’s math library has its origin in the C standard, which includes both sqrt(x) and pow(x,y), so a little bit of the history of programming is showing in Python’s function names. . | Locating the Right Module . You want to select a random character from a string: . bases = &#39;ACTTGCTTGAC&#39; . Which standard library module could help you? | Which function would you select from that module? Are there alternatives? | Try to write a program that uses the function. | Solution . The random module seems like it could help you. . The string has 11 characters, each having a positional index from 0 to 10. You could use random.randrange function (or the alias random.randint if you find that easier to remember) to get a random integer between 0 and 10, and then pick out the character at that position: . from random import randrange random_index = randrange(len(bases)) print(bases[random_index]) . or more compactly: . from random import randrange print(bases[randrange(len(bases))]) . Perhaps you found the random.sample function? It allows for slightly less typing: . from random import sample print(sample(bases, 1)[0]) . Note that this function returns a list of values. We will learn about lists in episode 11. . There’s also other functions you could use, but with more convoluted code as a result. . Jigsaw Puzzle (Parson’s Problem) Programming Example . Rearrange the following statements so that a random DNA base is printed and its index in the string. Not all statements may be needed. Feel free to use/add intermediate variables. . bases=&quot;ACTTGCTTGAC&quot; import math import random ___ = random.randrange(n_bases) ___ = len(bases) print(&quot;random base &quot;, bases[___], &quot;base index&quot;, ___) . Solution . import math import random bases = &quot;ACTTGCTTGAC&quot; n_bases = len(bases) idx = random.randrange(n_bases) print(&quot;random base&quot;, bases[idx], &quot;base index&quot;, idx) . When Is Help Available? . When a colleague of yours types help(math), Python reports an error: . NameError: name &#39;math&#39; is not defined . What has your colleague forgotten to do? . Solution . Importing the math module (import math) . Importing With Aliases . Fill in the blanks so that the program below prints 90.0. | Rewrite the program so that it uses import without as. | Which form do you find easier to read? | import math as m angle = ____.degrees(____.pi / 2) print(____) . Solution . import math as m angle = m.degrees(m.pi / 2) print(angle) . can bewritten as . import math angle = math.degrees(math.pi / 2) print(angle) . Since you just wrote the code and are familiar with it, you might actually find the first version easier to read. But when trying to read a huge piece of code written by someone else, or when getting back to your own huge piece of code after several months, non-abbreviated names are often easier, except where there are clear abbreviation conventions. . There Are Many Ways To Import Libraries! . Match the following print statements with the appropriate library calls. . Print commands: . print(&quot;sin(pi/2) =&quot;,sin(pi/2)) | print(&quot;sin(pi/2) =&quot;,m.sin(m.pi/2)) | print(&quot;sin(pi/2) =&quot;,math.sin(math.pi/2)) | Library calls: . from math import sin,pi | import math | import math as m | from math import * | Solution . Library calls 1 and 4. In order to directly refer to sin and pi without the library name as prefix, you need to use the from ... import ... statement. Whereas library call 1 specifically imports the two functions sin and pi, library call 4 imports all functions in the math module. | Library call 3. Here sin and pi are referred to with a shortened library name m instead of math. Library call 3 does exactly that using the import ... as ... syntax - it creates an alias for math in the form of the shortened name m. | Library call 2. Here sin and pi are referred to with the regular library name math, so the regular import ... call suffices. | Importing Specific Items . Fill in the blanks so that the program below prints 90.0. | Do you find this version easier to read than preceding ones? | Why wouldn’t programmers always use this form of import? | ____ math import ____, ____ angle = degrees(pi / 2) print(angle) . Solution . from math import degrees, pi angle = degrees(pi / 2) print(angle) . Most likely you find this version easier to read since it’s less dense. The main reason not to use this form of import is to avoid name clashes. For instance, you wouldn’t import degrees this way if you also wanted to use the name degrees for a variable or function of your own. Or if you were to also import a function named degrees from another library. . Reading Error Messages . Read the code below and try to identify what the errors are without running it. | Run the code, and read the error message. What type of error is it? | from math import log log(0) . Solution . The logarithm of x is only defined for x &gt; 0, so 0 is outside the domain of the function. | You get an error of type “ValueError”, indicating that the function received an inappropriate argument value. The additional message “math domain error” makes it clearer what the problem is. | Show answer . See the notebook. . Back to Python part two. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Libraries-Qs.html",
            "relUrl": "/2021/08/02/Libraries-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "Introduction",
            "content": "Computing has become central to virtually all research and development in academia and industry, and with the advent of Machine Learning and High-Performance Computing this dominance is set to continue. . Computational physics encompasses a wide number of areas including materials modelling, particle physics simulations, protein structure prediction and plasma modelling. In fact, it is possible to find a computational branch for every major field in physics. . The focus of this course is to equip with you with the transferable skills needed for success in a range of computational disciplines, with examples tailored towards the physics domain. . This course is split into three sections - Getting started, Getting results and Getting it out there. In the first part of the course, Getting started, we will introduce programming concepts and Python libraries that are applicable to a wide range of research and industry - from game design to architecture. In the middle section of the course, which is called Getting results, we will apply these tools to model the differential equations that are so central to both classical and quantum physics. In the final section of the course, Getting it out there, we will use modern software engineering techniques to document, test and share our code. . How does this course relate to experimental physics? . The first part of this course covers the basic skills needed for processing experimental data using Python. At the end of Getting started you will be able to read in experimental data from a plain text file, clean the data, apply basic statistical analysis and plot. We very much encourage you to apply the tools outlined in this course to your experimental analysis. .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Introduction.html",
            "relUrl": "/2021/08/02/Introduction.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "Built-in functions, help and errors",
            "content": ". Questions: . How can I use built-in functions? | How can I find out what they do? | What kind of errors can occur in programs? | . objectives: . Explain the purpose of functions. | Correctly call built-in Python functions. | Correctly nest calls to built-in functions. | Use help to display documentation for built-in functions. | Correctly describe situations in which SyntaxError and NameError occur. | . keypoints: . Use comments to add documentation to programs. | A function may take zero or more arguments. | Commonly-used built-in functions include max, min, and round. | Functions may only work for certain (combinations of) arguments. | Functions may have default values for some arguments. | Use the built-in function help to get help for a function. | The Jupyter Notebook has two ways to get help. | Every function returns something. | Python reports a syntax error when it can&#39;t understand the source of a program. | Python reports a runtime error when something goes wrong while a program is executing. | Fix syntax errors by reading the source code, and runtime errors by tracing the program&#39;s execution. | . . Use comments to add documentation to programs. . adjustment = 0.5 # Neither is this - anything after &#39;#&#39; is ignored. . A function may take zero or more arguments. . We have seen some functions already now let&#39;s take a closer look. | An argument is a value passed into a function. | len takes exactly one. | int, str, and float create a new value from an existing one. | print takes zero or more. | print with no arguments prints a blank line. Must always use parentheses, even if they&#39;re empty, so that Python knows a function is being called. | . | . print(&#39;before&#39;) print() print(&#39;after&#39;) . before after . Commonly-used built-in functions include max, min, and round. . Use max to find the largest value of one or more values. | Use min to find the smallest. | Both work on character strings as well as numbers. &quot;Larger&quot; and &quot;smaller&quot; use (0-9, A-Z, a-z) to compare letters. | . | . print(max(1, 2, 3)) print(min(&#39;a&#39;, &#39;A&#39;, &#39;0&#39;)) . 3 0 . Functions may only work for certain (combinations of) arguments. . max and min must be given at least one argument. &quot;Largest of the empty set&quot; is a meaningless question. | . | And they must be given things that can meaningfully be compared. | . print(max(1, &#39;a&#39;)) . TypeError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11743/2220240766.py in &lt;module&gt; -&gt; 1 print(max(1, &#39;a&#39;)) TypeError: &#39;&gt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39; . Functions may have default values for some arguments. . round will round off a floating-point number. | By default, rounds to zero decimal places. | . round(3.712) . 4 . We can specify the number of decimal places we want. | . round(3.712, 1) . 3.7 . Use the built-in function help to get help for a function. . Every built-in function has online documentation. | . help(round) . Help on built-in function round in module builtins: round(number, ndigits=None) Round a number to a given precision in decimal digits. The return value is an integer if ndigits is omitted or None. Otherwise the return value has the same type as the number. ndigits may be negative. . Python reports a syntax error when it can&#39;t understand the source of a program. . Won&#39;t even try to run the program if it can&#39;t be parsed. | . name = &#39;Feng . File &#34;/var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11743/3103437601.py&#34;, line 2 name = &#39;Feng ^ SyntaxError: EOL while scanning string literal . age = = 52 . File &#34;/var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11743/3760570524.py&#34;, line 2 age = = 52 ^ SyntaxError: invalid syntax . We can Look more closely at the error message: | . print(&quot;hello world&quot; . File &#34;/var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11743/1028029194.py&#34;, line 1 print(&#34;hello world&#34; ^ SyntaxError: unexpected EOF while parsing . The message indicates a problem on first line of the input (&quot;line 1&quot;). In this case the &quot;ipython-input&quot; section of the file name tells us that we are working with input into IPython, the Python interpreter used by the Jupyter Notebook. | . | The -6- part of the filename indicates that the error occurred in cell 6 of our Notebook. | Next is the problematic line of code, indicating the problem with a ^ pointer. | . Python reports a runtime error when something goes wrong while a program is executing. . age = 53 remaining = 100 - aege # mis-spelled &#39;age&#39; . NameError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11743/4124232921.py in &lt;module&gt; 1 age = 53 -&gt; 2 remaining = 100 - aege # mis-spelled &#39;age&#39; NameError: name &#39;aege&#39; is not defined . Fix syntax errors by reading the source and runtime errors by tracing execution. | . The Jupyter Notebook has two ways to get help. . Place the cursor inside the parenthesis of the function, hold down shift, and press tab. | Or type a function name with a question mark after it. | . Every function returns something. . Every function call produces some result. | If the function doesn&#39;t have a useful result to return, it usually returns the special value None. | . result = print(&#39;example&#39;) print(&#39;result of print is&#39;, result) . . Do the quick-test. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Functions.html",
            "relUrl": "/2021/08/02/Functions.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "Built-in functions, help and errors - quick test",
            "content": "What Happens When . Explain in simple terms the order of operations in the following program: when does the addition happen, when does the subtraction happen, when is each function called, etc. | What is the final value of radiance? | radiance = 1.0 radiance = max(2.1, 2.0 + min(radiance, 1.1 * radiance - 0.5)) . Show answer 1.1 * radiance = 1.1 | 1.1 - 0.5 = 0.6 | min(randiance, 0.6) = 0.6 | 2.0 + 0.6 = 2.6 | max(2.1, 2.6) = 2.6 | | At the end, radiance = 2.6 | Spot the Difference . Predict what each of the print statements in the program below will print. | Does max(len(rich), poor) run or produce an error message? If it runs, does its result make any sense? | easy_string = &quot;abc&quot; print(max(easy_string)) rich = &quot;gold&quot; poor = &quot;tin&quot; print(max(rich, poor)) print(max(len(rich), len(poor))) . Show answer c | tin | 4 . | It throws a TypeError. The command is trying to run max(4, &#39;tin&#39;) and you can’t compare a string and an integer | Why Not? . Why don’t max and min return None when they are given no arguments? . Show answer max and min return TypeErrors in this case because the correct number of parameters was not supplied. If it just returned None, the error would be much harder to trace as it would likely be stored into a variable and used later in the program, which could lead to unintended behaviour. . . See the notebook. . Back to Python basics - part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Functions-Qs.html",
            "relUrl": "/2021/08/02/Functions-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "For loops - quick test",
            "content": "Classifying Errors . Is an indentation error a syntax error or a runtime error? . Solution . An IndentationError is a syntax error. Programs with syntax errors cannot be started. A program with a runtime error will start but an error will be thrown under certain conditions. . Tracing Execution . Create a table showing the numbers of the lines that are executed when this program runs, and the values of the variables after each line is executed. . total = 0 for char in &quot;tin&quot;: total = total + 1 . Solution . Line no Variables . 1 | total = 0 | . 2 | total = 0 char = ‘t’ | . 3 | total = 1 char = ‘t’ | . 2 | total = 1 char = ‘i’ | . 3 | total = 2 char = ‘i’ | . 2 | total = 2 char = ‘n’ | . 3 | total = 3 char = ‘n’ | . Reversing a String . Fill in the blanks in the program below so that it prints “nit” (the reverse of the original character string “tin”). . original = &quot;tin&quot; result = ____ for char in original: result = ____ print(result) . Solution . original = &quot;tin&quot; result = &quot;&quot; for char in original: result = char + result print(result) . Practice Accumulating . Fill in the blanks in each of the programs below to produce the indicated result. . # Total length of the strings in the list: [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] =&gt; 12 total = 0 for word in [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]: ____ = ____ + len(word) print(total) . Solution . total = 0 for word in [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]: total = total + len(word) print(total) . # List of word lengths: [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] =&gt; [3, 5, 4] lengths = ____ for word in [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]: lengths.____(____) print(lengths) . Solution . lengths = [] for word in [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]: lengths.append(len(word)) print(lengths) . # Concatenate all words: [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] =&gt; &quot;redgreenblue&quot; words = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] result = ____ for ____ in ____: ____ print(result) . Solution . words = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] result = &quot;&quot; for word in words: result = result + word print(result) . # Create acronym: [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;] =&gt; &quot;RGB&quot; # write the whole thing . Solution . acronym = &quot;&quot; for word in [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]: acronym = acronym + word[0].upper() print(acronym) . Cumulative Sum . Reorder and properly indent the lines of code below so that they print an array with the cumulative sum of data. The result should be [1, 3, 5, 10]. . cumulative += [sum] for number in data: cumulative = [] sum += number sum = 0 print(cumulative) data = [1,2,2,5] . Solution . sum = 0 data = [1,2,2,5] cumulative = [] for number in data: sum += number cumulative.append(sum) print(cumulative) . Identifying Variable Name Errors . Read the code below and try to identify what the errors are without running it. | Run the code and read the error message. What type of NameError do you think this is? Is it a string with no quotes, a misspelled variable, or a variable that should have been defined but was not? | Fix the error. | Repeat steps 2 and 3, until you have fixed all the errors. | for number in range(10): # use a if the number is a multiple of 3, otherwise use b if (Number % 3) == 0: message = message + a else: message = message + &quot;b&quot; print(message) . Solution . message = &quot;&quot; for number in range(10): # use a if the number is a multiple of 3, otherwise use b if (number % 3) == 0: message = message + &quot;a&quot; else: message = message + &quot;b&quot; print(message) . Identifying Item Errors . Read the code below and try to identify what the errors are without running it. | Run the code, and read the error message. What type of error is it? | Fix the error. | seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;] print(&#39;My favorite season is &#39;, seasons[4]) . Solution . seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;] print(&#39;My favorite season is &#39;, seasons[3]) . Show answer . See the notebook. . Back to Python part two. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/For-Loops-Qs.html",
            "relUrl": "/2021/08/02/For-Loops-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "Data analysis",
            "content": "It uses plotting UV-Vis data as its motivating example. . Before you begin . Download the UV-Vis data: UVVis-01.csv | .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Data_analysis.html",
            "relUrl": "/2021/08/02/Data_analysis.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "Title",
            "content": "- toc:false - branch: master - badges: true - comments: false - categories: [python] - hide: true . . Questions: . What kinds of data do programs store? | How can I convert one type to another? | . Objectives: . Explain key differences between integers and floating point numbers. | Explain key differences between numbers and character strings. | Use built-in functions to convert between integers, floating point numbers, and strings. | . Keypoints: . Every value has a type. | Use the built-in function type to find the type of a value. | Types control what operations can be done on values. | Strings can be added and multiplied. | Use an index to get a single character from a string. | Use a slice to get a substring. | Use the built-in function len to find the length of a string. | Convert numbers to strings or vice versa when operating on them. | You can mix integers and floats freely in operations. | Variables only change value when something is assigned to them. | . . Every value has a type. . Every value in a program has a specific type. | Integer (int): represents positive or negative whole numbers like 3 or -512. | Floating point number (float): represents real numbers like 3.14159 or -2.5. | Character string (usually called &quot;string&quot;, str): text. Written in either single quotes or double quotes (as long as they match). | The quote marks aren&#39;t printed when the string is displayed. | . | . Use the built-in function type to find the type of a value. . Use the built-in function type to find out what type a value has. | Works on variables as well. But remember: the value has the type the variable is just a label. | . | . print(type(52)) . &lt;class &#39;int&#39;&gt; . fitness = &#39;average&#39; print(type(fitness)) . &lt;class &#39;str&#39;&gt; . Types control what operations (or methods) can be performed on a given value. . A value&#39;s type determines what the program can do to it. For example, you can subtract two integers but not two strings. | . print(5 - 3) . 2 . print(&#39;hello&#39; - &#39;h&#39;) . TypeError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11287/13340790.py in &lt;module&gt; -&gt; 1 print(&#39;hello&#39; - &#39;h&#39;) TypeError: unsupported operand type(s) for -: &#39;str&#39; and &#39;str&#39; . You can use the &quot;+&quot; and &quot;*&quot; operators on strings. . &quot;Adding&quot; character strings concatenates them. | . full_name = &#39;Ahmed&#39; + &#39; &#39; + &#39;Walsh&#39; print(full_name) . Ahmed Walsh . Multiplying a character string by an integer N creates a new string that consists of that character string repeated N times. | . separator = &#39;=&#39; * 10 print(separator) . ========== . You can index to get a single character from a string. . The characters (individual letters, numbers, and so on) in a string are ordered. For example, the string &#39;AB&#39; is not the same as &#39;BA&#39;. Because of this ordering, we can treat the string as a list of characters. | Each position in the string (first, second, etc.) is given a number. This number is called an index or sometimes a subscript. | Indices are numbered from 0. | Use the position&#39;s index in square brackets to get the character at that position. | . atom_name = &#39;helium&#39; print(atom_name[0]) . h . Use a slice to get a substring. . A slice is a part of a string | We take a slice by using [start:stop], where start is replaced with the index of the first element we want and stop is replaced with the index of the element just after the last element we want. | Mathematically, you might say that a slice selects [start:stop). | The difference between stop and start is the slice&#39;s length. | Taking a slice does not change the contents of the original string. Instead, the slice is a copy of part of the original string. | You can slice any list-like thing and we will come back to slicing several times in this course | . atom_name = &#39;sodium&#39; print(atom_name[4:6]) . um . Use the built-in function len to find the length of a string. . print(len(&#39;helium&#39;)) . 6 . Nested functions are evaluated from the inside out, just like in mathematics. | len is a built-in function because it is always available - you do not need to import a particular library to access it | Numbers do not have a length | . print(len(52)) . TypeError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11287/2246900780.py in &lt;module&gt; -&gt; 1 print(len(52)) TypeError: object of type &#39;int&#39; has no len() . Convert numbers to strings or vice versa when operating on them. . You cannot add numbers and strings. | . print(1 + &#39;2&#39;) . TypeError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_11287/3905401405.py in &lt;module&gt; -&gt; 1 print(1 + &#39;2&#39;) TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . This is not allowed because it&#39;s ambiguous: should 1 + &#39;2&#39; be 3 or &#39;12&#39;? | Some types can be converted to other types by using the type name as a function. | . print(1 + int(&#39;2&#39;)) print(str(1) + &#39;2&#39;) . 3 12 . You can mix integers and floats freely in operations. . Integers and floating-point numbers can be mixed in arithmetic. | Python 3 automatically converts integers to floats as needed. | . print(&#39;half is&#39;, 1 / 2.0) print(&#39;three squared is&#39;, 3.0 ** 2) . half is 0.5 three squared is 9.0 . Variables only change value when something is assigned to them. . If we make one cell in a spreadsheet depend on another, and update the latter, the former updates automatically. | This does not happen in programming languages. | . first = 1 second = 5 * first first = 2 print(&#39;first is&#39;, first, &#39;and second is&#39;, second) . first is 2 and second is 5 . The computer reads the value of first when doing the multiplication, creates a new value, and assigns it to second. | The value of second is not updated when we re-assign the value of first. | . . Tip: By now we have seen plenty of Error messages. Don&#8217;t be afraid of Error messages - they won&#8217;t break the computer! In the next lesson we will learn how to use these messages to fix our code more efficiently. . . Do the quick-test. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Data-Types.html",
            "relUrl": "/2021/08/02/Data-Types.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post22": {
            "title": "Data types and type conversion - quick test",
            "content": "Slicing . If you assign a = 123, what happens if you try to get the second digit of a via a[1]? . Show answer Numbers are not stored in the written representation, so they can’t be treated like strings. . a = 123 print(a[1]) . TypeError: &#39;int&#39; object is not subscriptable . More slicing . What does the following program print? . atom_name = &#39;carbon&#39; print(&#39;atom_name[1:3] is:&#39;, atom_name[1:3]) . Show answer atom_name[1:3] is: ar . Even more slicing . Open a Notebook to help answer the following questions: . What does thing[low:] (without a value after the colon) do? | What does thing[:high] (without a value before the colon) do? | What does thing[:] (just a colon) do? | What does thing[-2] do? | Show answer Slices from low to the end (inclusive) | Slices from the start to high (exclusive) | Slices from the start to the end | Selects the second last element | Decimals . What type of value is 3.4? How can you find out? . Show answer It is a floating-point number (often abbreviated “float”). . print(type(3.4)) . &lt;class &#39;float&#39;&gt; . Choose a Type . What type of value (integer, floating point number, or character string) would you use to represent each of the following? . Number of days since the start of the year. | Time elapsed from the start of the year until now in days. | Serial number of a piece of lab equipment. | A lab specimen’s age | Current population of a city. | Average population of a city over time. | Show answer The answers to the questions are: . Integer, since the number of days would lie between 1 and 365. | Floating point, since fractional days are required | Character string if serial number contains letters and numbers, otherwise integer if the serial number consists only of numerals | This will vary! How do you define a specimen’s age? whole days since collection (integer)? date and time (string)? | Choose floating point to represent population as large aggreates (eg millions), or integer to represent population in units of individuals. | Floating point number, since an average is likely to have a fractional part. | Division Types . In Python 3, the // operator performs integer (whole-number) floor division, the / operator performs floating-point division, and the ‘%’ (or modulo) operator calculates and returns the remainder from integer division: . print(&#39;5 // 3:&#39;, 5//3) print(&#39;5 / 3:&#39;, 5/3) print(&#39;5 % 3:&#39;, 5%3) . 5 // 3: 1 5 / 3: 1.6666666666666667 5 % 3: 2 . However in Python 2 (and other languages), the / operator between two integer types perform a floor (//) division. To perform a float division, we have to convert one of the integers to float. . print(&#39;5 // 3:&#39;, 1) print(&#39;5 / 3:&#39;, 1 ) print(&#39;5 / float(3):&#39;, 1.6666667 ) print(&#39;float(5) / 3:&#39;, 1.6666667 ) print(&#39;float(5 / 3):&#39;, 1.0 ) print(&#39;5 % 3:&#39;, 2) . If num_subjects is the number of subjects taking part in a study, and num_per_survey is the number that can take part in a single survey, write an expression that calculates the number of surveys needed to reach everyone once. . Show answer We want the minimum number of surveys that reaches everyone once, which is the rounded up value of num_subjects / num_per_survey. This is equivalent to performing an integer division with // and adding 1. . num_subjects = 600 num_per_survey = 42 num_surveys = num_subjects // num_per_survey + 1 print(num_subjects, &#39;subjects,&#39;, num_per_survey, &#39;per survey:&#39;, num_surveys) . 600 subjects, 42 per survey: 15 . Arithmetic with Different Types . Which of the following will print 2.0? Note: there may be more than one right answer. . first = 1.0 second = &quot;1&quot; third = &quot;1.1&quot; . first + float(second) | float(second) + float(third) | first + int(third) | first + int(float(third)) | int(first) + int(float(third)) | 2.0 * second | Show answer Answer: 1 and 4 . Complex Numbers . Python provides complex numbers, which are written as 1.0+2.0j. If val is an imaginary number, its real and imaginary parts can be accessed using dot notation as val.real and val.imag. . Why do you think Python uses j instead of i for the imaginary part? | What do you expect 1+2j + 3 to produce? | What do you expect ‘4j’ to be? What about 4 j or `4 + j’? &gt; | Show answer Standard mathematics treatments typically use i to denote an imaginary number. However, from media reports it was an early convention established from electrical engineering that now presents a technically expensive area to change. Stack Overflow provides additional explanation and discussion | 4+2j | 4j, syntax error, depends on the value of j | . See the notebook. . Back to Python basics - part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Data-Types-Qs.html",
            "relUrl": "/2021/08/02/Data-Types-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post23": {
            "title": "Conditionals - quick test",
            "content": "Compound Relations Using and, or, and Parentheses . Often, you want some combination of things to be true. You can combine relations within a conditional using and and or. Continuing the example above, suppose you have . mass = [ 3.54, 2.07, 9.22, 1.86, 1.71] velocity = [10.00, 20.00, 30.00, 25.00, 20.00] i = 0 for i in range(5): if mass[i] &gt; 5 and velocity[i] &gt; 20: print(&quot;Fast heavy object. Duck!&quot;) elif mass[i] &gt; 2 and mass[i] &lt;= 5 and velocity[i] &lt;= 20: print(&quot;Normal traffic&quot;) elif mass[i] &lt;= 2 and velocity[i] &lt;= 20: print(&quot;Slow light object. Ignore it&quot;) else: print(&quot;Whoa! Something is up with the data. Check it&quot;) . Just like with arithmetic, you can and should use parentheses whenever there is possible ambiguity. A good general rule is to always use parentheses when mixing and and or in the same condition. That is, instead of: . if mass[i] &lt;= 2 or mass[i] &gt;= 5 and velocity[i] &gt; 20: . write one of these: . if (mass[i] &lt;= 2 or mass[i] &gt;= 5) and velocity[i] &gt; 20: if mass[i] &lt;= 2 or (mass[i] &gt;= 5 and velocity[i] &gt; 20): . so it is perfectly clear to a reader (and to Python) what you really mean. . Tracing Execution . What does this program print? . pressure = 71.9 if pressure &gt; 50.0: pressure = 25.0 elif pressure &lt;= 50.0: pressure = 0.0 print(pressure) . Solution . 25.0 . Trimming Values . Fill in the blanks so that this program creates a new list containing zeroes where the original list’s values were negative and ones where the original list’s values were positive. . original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4] result = ____ for value in original: if ____: result.append(0) else: ____ print(result) . [0, 1, 1, 1, 0, 1] . Solution . original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4] result = [] for value in original: if value&lt;0.0: result.append(0) else: result.append(1) print(result) . Initializing . Modify this program so that it finds the largest and smallest values in the list no matter what the range of values originally is. . values = [...some test data...] smallest, largest = None, None for v in values: if ____: smallest, largest = v, v ____: smallest = min(____, v) largest = max(____, v) print(smallest, largest) . What are the advantages and disadvantages of using this method to find the range of the data? . Solution . values = [-2,1,65,78,-54,-24,100] smallest, largest = None, None for v in values: if smallest==None and largest==None: smallest, largest = v, v else: smallest = min(smallest, v) largest = max(largest, v) print(smallest, largest) . Show answer . See the notebook. . Back to Python part two. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Conditionals-Qs.html",
            "relUrl": "/2021/08/02/Conditionals-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post24": {
            "title": "Variables and assignment",
            "content": ". Questions: . How can I store data in programs? | . Objectives: . Write programs that assign scalar values to variables and perform calculations with those values. | Correctly trace value changes in programs that use scalar assignment. | . Keypoints: . Use variables to store values. | Use print to display values. | Variables must be created before they are used. | Variables persist between cells. | Variables can be used in calculations. | Python is case-sensitive. | Use valid and meaningful variable names. | . . Use variables to store values. . Variables are names for values. | In Python the = symbol assigns the value on the right to the name on the left. | The variable is created when a value is assigned to it. | Here, Python assigns an age to a variable age and a name in quotes to a variable first_name. | . age = 42 first_name = &#39;Ahmed&#39; . Use print to display values. . Python has a built-in function called print that prints things as text. | Call the function (i.e., tell Python to run it) by using its name. | Provide values to the function (i.e., the things to print) in parentheses. | To add a string to the printout, wrap the string in single or double quotes. | The values passed to the function are called &#39;arguments&#39; | . print(first_name, &#39;is&#39;, age, &#39;years old&#39;) . Ahmed is 42 years old . print automatically puts a single space between items to separate them. | And wraps around to a new line at the end. | . Variables must be created before they are used. . Unlike some languages, which &quot;guess&quot; a default value, if a variable doesn&#39;t exist yet, or if the name has been mis-spelled, Python reports an error. | . print(last_name) . NameError Traceback (most recent call last) /var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_792/2256896230.py in &lt;module&gt; -&gt; 1 print(last_name) 2 NameError: name &#39;last_name&#39; is not defined . The last line of an error message is usually the most informative. | We will look at error messages in detail later. | . Variables Persist Between Cells . Be aware that it is the order of execution of cells that is important in a Jupyter notebook, not the order in which they appear. Python will remember all the code that was run previously, including any variables you have defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then (re)run cells further up, those defined further down will still be present. As an example, we can create 2 cells with the following content, in this order: . print(myval) . myval = 1 . If you execute this in order, the first cell will give an error. However, if you run the first cell after the second cell it will print out ‘1’. To prevent confusion, it can be helpful to use the Kernel -&gt; Restart &amp; Run All option which clears the interpreter and runs everything from a clean slate going top to bottom. . Variables can be used in calculations. . We can use variables in calculations just as if they were values. | . age = 42 age = age + 3 print(&#39;Age in three years:&#39;, age) . Age in three years: 45 . Python is case-sensitive. . Python thinks that upper- and lower-case letters are different, so Name and name are different variables. | There are conventions for using upper-case letters at the start of variable names so we will use lower-case letters for now. | . . Tip: In programming an eye for detail is important. If you include an extra full-stop, or forget a space, then you may get an error message or unexpected behaviour. . Use valid and meaningful variable names. . Python doesn&#39;t care what you call variables as long as they obey the following rules: . can only contain letters, digits, and underscore _ (typically used to separate words in long variable names) | cannot start with a digit | . | Variable names that start with underscores like __bobbins_real_age have a special meaning so we won&#39;t do that until we understand the convention. . | . flabadab = 42 ewr_422_yY = &#39;Ahmed&#39; print(ewr_422_yY, &#39;is&#39;, flabadab, &#39;years old&#39;) . Use meaningful variable names to help other people understand what the program does. | The most important &quot;other person&quot; is your future self. | . . Do the quick-test. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/02-Variables-Assignment.html",
            "relUrl": "/2021/08/02/02-Variables-Assignment.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post25": {
            "title": "Variables and assignment - quick test",
            "content": "Swapping Values . Fill the table showing the values of the variables in this program after each statement is executed. . Command Value of x Value of y Value of swap . x = 1.0 |   |   |   | . y = 3.0 |   |   |   | . swap = x |   |   |   | . x = y |   |   |   | . y = swap |   |   |   | . Show answer Command Value of x Value of y Value of swap . x = 1.0 | 1.0 | not defined | not defined | . y = 3.0 | 1.0 | 3.0 | not defined | . swap = x | 1.0 | 3.0 | 1.0 | . x = y | 3.0 | 3.0 | 1.0 | . y = swap | 3.0 | 1.0 | 1.0 | . These three lines exchange the values in x and y using the swap variable for temporary storage. This is a fairly common programming idiom. . Predicting Values . What is the final value of position in the program below? (Try to predict the value without running the program, then check your prediction.) . initial = &#39;left&#39; position = initial initial = &#39;right&#39; . Show answer The final value of position is &#39;left&#39;. . The initial variable is assigned the value ‘left’. In the second line, the position variable also receives the string value ‘left’. In third line, the initial variable is given the value ‘right’, but the position variable retains its string value of ‘left’. . Choosing a Name . Which is a better variable name, m, min, or minutes? Why? . Hint: think about which code you would rather inherit from someone who is leaving the lab: . ts = m * 60 + s tot_sec = min * 60 + sec total_seconds = minutes * 60 + seconds . Show answer minutes is better because min might mean something like “minimum” (and actually does in Python, but we haven’t seen that yet). . . See the notebook. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/02-Variables-Assignment-Qs.html",
            "relUrl": "/2021/08/02/02-Variables-Assignment-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post26": {
            "title": "Running python - quick test",
            "content": "Creating Lists in Markdown . Create a nested list in a Markdown cell in a notebook that looks like this: . Get funding. | Do work. Design experiment. | Collect data. | Analyze. | . | Write up. | Publish. | Show answer Note that the bullet list is indented 2 spaces so that it is inline with the items of the numbered list. . 1. Get funding. 2. Do work. * Design experiment. * Collect data. * Analyze. 3. Write up. 4. Publish. . Multiple Maths . What is displayed when a Python cell in a notebook that contains several calculations is executed? For example, what happens when this cell is executed? . 7 * 3 2 + 1 . Show answer Python returns the output of the last calculation. The output is: . 3 . Equations . Standard Markdown (such as we’re using for these notes) won’t render equations, but the Notebook will. Create a new Markdown cell and enter the following: . $ sum_{i=1}^{N} 2^{-i} approx 1$ . (It’s probably easier to copy and paste.) What does it display? What do you think the underscore, _, circumflex, ^, and dollar sign, $, do? . Show answer The notebook shows the equation as it would be rendered from LaTeX equation syntax. . The dollar sign, $, is used to tell markdown that the text in between is a latex equation. | underscore, _, is used for subscripts | circumflex, ^, is used for superscripts. | A pair of curly braces, { and }, is used to group text together so that the statement i=1 becomes the the subscript and N becomes the superscript. | Similarly, -i is in curly braces to make the whole statement the superscript for 2. | sum and approx are latex commands for “sum over” and “approximate” symbols. | . . See the notebook. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/01-Running_python-Qs.html",
            "relUrl": "/2021/08/02/01-Running_python-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "Running Python",
            "content": ". Questions: . How can I run Python programs? | . Objectives: . Launch the Jupyter Notebook, create new notebooks, and exit the Notebook. | Create Markdown cells in a notebook. | Create and run Python cells in a notebook. | . Keypoints: . Python programs are plain text files. | Use the Jupyter Notebook for editing and running Python. | Use the keyboard and mouse to select and edit cells. | The Notebook will turn Markdown into pretty-printed documentation. | . . There are multiple ways to run Python code . Python programmes can be written as plain text files using a text editor | They have the .py extension to let everyone (including the operating system) know it is a Python program. This is convention, not a requirement. We will use plain text files for writing Python code towards the end of this course. | For this part of the course we are going to use [Jupyter Notebooks][jupyter]. | The Notebook provides code completion and other helpful features. | Notebook files have the extension .ipynb to distinguish them from plain-text Python programs. | . You can use the Jupyter Notebook for editing and running Python. . When we type jupyter notebook in a terminal (or Git Bash) we start a Jupyter Notebook server and open the default web browser. | The server runs locally on your machine only and does not use an internet connection. | You can type code into the browser and see the result when the web page talks to the server. | This has several advantages: You can easily type, edit, and copy and paste blocks of code. | Tab complete allows you to easily access the names of things you are using and learn more about them. | It allows you to annotate your code with links, different sized text, bullets, etc. to make it more accessible to you and your collaborators. | It allows you to display figures next to the code that produces them to tell a complete story of the analysis. The notebook file is stored in a format called JSON. | Just like a webpage, what&#39;s saved looks different from what you see in your browser. | But this format allows Jupyter to mix source code, text, and images, all in one file. | . | . . Tip: You can view this page as a Notebook by clicking on either the Binder or Colab button at the top of this page. . Use the keyboard and mouse to select and edit cells. . You can create a new cell by clicking on Insert at the top of the Notebook. | Pressing the &quot;shift&quot; and the &quot;enter&quot; key together will execute the contents of the cell. | . Use command mode to speed things up . You can also use keyboard shortcuts by entering command mode using the esc key. | Notice that the border of your cell turns blue. | Type a shortcut command - for example b to create a new cell. | The list of shortcuts can be found using h. | To exit command mode and start editing the cell press enter. | . The Notebook will turn Markdown into pretty-printed documentation. . Notebooks can also render [Markdown][markdown] which is a simple plain-text format for writing lists, links, and other things that might go into a web page. | You can turn cell into a Markdown cell by selecting Markdown from the drop-down menu at the top of the Notebook | In [ ]: will disappear to show it is no longer a code cell and you will be able to write in Markdown. | . Lists . * Use asterisks * to create * bullet lists. . Use asterisks | to create | bullet lists. | . 1. Use numbers 2. to create 3. numbered lists. . Use numbers | to create | numbered lists. | 1. You can 2. also * create sub-lists . You can | also create sub-lists | . | Headings . # A Level-1 Heading . A Level-1 Heading . ## A Level-2 Heading (etc) . A Level-2 Heading (etc) . Whitespace . Line breaks don&#39;t matter. But blank lines create new paragraphs. . Line breaks don&#39;t matter. . But blank lines create new paragraphs. . Basic formatting . You can easily: . use italics with *italics* | use bold with **bold** | Create links with [...](...). | . . Do the quick-test. . Back to Python part one. . .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/01-Running_Python.html",
            "relUrl": "/2021/08/02/01-Running_Python.html",
            "date": " • Aug 2, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This website contains resources for the second year course “Theory, computation and experiment” (KD5081) at Northumbria University, UK. The resources have been developed by Dr Lucy Whalley and the website is powered by Github and fastpages which is licensed under Apache License 2.0. . The content of this website is derived from several other sources: . Software Carpentry (in particular, Introduction and Setup) | Code Refinery | pycharge (landing page animation) | . The content of this website is licensed under a Creative Commons Attribution 4.0 International License. You can re-use any of its content as long as the following attribution is included, and you indicate if changes were made. .",
          "url": "https://nu-cem.github.io/CompPhys/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nu-cem.github.io/CompPhys/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}