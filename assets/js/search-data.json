{
  
    
        "post0": {
            "title": "Version control and Github",
            "content": "Version control and Github .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Version_control.html",
            "relUrl": "/2021/08/02/Version_control.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Sharing your code",
            "content": "",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Sharing_code.html",
            "relUrl": "/2021/08/02/Sharing_code.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Python scripts and the Unix terminal",
            "content": "Python scripts and the Unix terminal .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Scripting.html",
            "relUrl": "/2021/08/02/Scripting.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Python basics - part two",
            "content": "Python basics - part two .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Python_basics_two.html",
            "relUrl": "/2021/08/02/Python_basics_two.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Python basics - part one",
            "content": "This lesson is an introduction to programming in Python for people with little or no previous programming experience. It uses plotting UV-Vis data as its motivating example. This lesson references the Jupyter Notebook, but can be followed using a regular Python interpreter as well. Please note that this lesson, like all others in the course, uses Python 3 rather than Python 2. . Before you begin . Check that Python is installed: please see the setup instructions for details. | Download the UV-Vis data: UVVis-01.csv | Launch a Jupyter notebook: open Git Bash (Windows) or a terminal (Mac) and type jupyter notebook | . . You should launch the Jupyter Notebook in the folder where you want to save your notebook files. You can find this folder using the Unix commands cd (change directory) and pwd (print working directory). We will learn more about Unix later in the course. . Lesson outline . Topic Objective Quick test . Running Python | How can I run Python programs? | :running: | . Variables and Assignment | How can I store data in programs? | :nail_care: | . Data Types and Type Conversion | What kinds of data do programs store? How can I convert one type to another? | :dancer: | . Built-in Functions, Help and Errors | How can I use built-in functions? How can I find out what they do? What kind of errors can occur in programs? | :droplet: | . Lists | How can I store multiple values? | :ear: | . Resources . Lesson Exercises | Extension exercise | Presentation | Teaching notes | .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Python_basics_one.html",
            "relUrl": "/2021/08/02/Python_basics_one.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Plotting with Python",
            "content": "Plotting with Python .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Plotting.html",
            "relUrl": "/2021/08/02/Plotting.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Modelling with Partial Differential Equations",
            "content": "Modelling with Partial Differential Equations .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/PDEs.html",
            "relUrl": "/2021/08/02/PDEs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Open science",
            "content": "Open science .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Open_science.html",
            "relUrl": "/2021/08/02/Open_science.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Modelling with Ordinary Differential Equations",
            "content": "Modelling with Ordinary Differential Equations .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/ODEs.html",
            "relUrl": "/2021/08/02/ODEs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Introduction and Setup",
            "content": "Introduction . Computing has become central to virtually all research and development in academia and industry, and with the advent of Machine Learning and High-Performance Computing this dominance is set to continue. . Computational physics encompasses a wide number of areas including materials modelling, particle physics simulations, protein structure prediction and plasma modelling. In fact, it is possible to find a computational branch for every major field in physics. . The focus of this course is to equip with you with the transferable skills needed for success in a range of computational disciplines. . The software packages we will introduce in the first part of the course, Getting started, are applicable to all areas of research and industry - from game design to architecture. In the middle section of the course, Getting results, we will apply these tools to model the differential equations that are so central to both classical and quantum physics. In the final section of the course, Getting it out there, we will use modern software engineering techniques to document, test and share our code. . This course is split into three sections - Getting started, Getting results and Getting it out there. . Getting started Python part one | Python part two | Data analysis | Plotting | . | Getting results Modelling with partial differential equations | Modelling with ordinary differential equations | . | Getting it out there Python scripts and the Unix terminal | Testing and documentation | Version control and Github | Open science and build-your-own website | . | . . An eye for detail is important. If you include an extra full-stop, or forget a space, then your code may not run. Don’t let these Error messages worry you - they won’t break the computer! - but do double check the steps you have taken and the code you have written for typos or ‘silly’ mistakes. . Setup . To participate in this course you will need access to the following software: Python, Bash, Git and Jupyter. To install this software on your personal laptop or desktop carefully follow the instructions listed below. . You will also need a user account at github.com - Basic GitHub accounts are free. . . All of the software needed for this course is pre-installed in the MPEE computers at Northumbria University . . You can also run the Python Jupyter Notebook files remotely through the [binder] or [colab] services whenever you see an icon (e.g. like those at the top of this page). But be warned! Any changes you make are not saved and the service can time-out after a period of inactivity (usually ~20 minutes). . Python . [Python][python] is a popular language for scientific computing, and great for general-purpose programming as well. Installing all of its scientific packages individually can be a bit difficult, however, so we recommend the all-in-one installer [Anaconda][anaconda]. Please make sure you install Python version 3.x (e.g., 3.4 is fine). . Windows - [Video tutorial] . Open [https://www.anaconda.com/download] with your web browser. . | Download the Python 3 installer for Windows. . | Double-click the executable and install Python 3 using MOST of the default settings, the only exception is to check Add Anaconda to my PATH environment variable. . | Mac OS X - [Video tutorial] . Open [https://www.anaconda.com/download] with your web browser. . | Download the Python 3 installer for OS X. . | Install Python 3 using all of the defaults for installation. . | Bash and Git . Bash is a commonly-used shell that gives you the power to do simple tasks more quickly. Git is version-control software that allows to you to develop code more efficiently and share a public version of your code on github.com. In fact, this website is built using Bash, Git and github.com (amongst other tools) - the code can be found here. You can download both tools at the same time following the instructions below. . Windows - video tutorial . Download the Git for Windows installer . | Run the installer and follow the steps below: . a) Click on “Next” four times (two times if you’ve previously installed Git). You don’t need to change anything in the Information, location, components, and start menu screens. . b) Select “Use the nano editor by default” and click on “Next”. . c) Keep “Use Git from the command line and…” selected and click on “Next”. If you forgot to do this programs that you need for the workshop will not work properly. If this happens rerun the installer and select the appropriate option. . d) Click on “Next” . e) Keep “Checkout Windows-style, commit Unix-style line endings” selected and click on “Next”. . f) Select “Use Windows’ default console window” and click on “Next”. . g) Ensure that “Default (fast-forward or merge) is selected and click “Next” . h) Ensure that “Git Credential Manager Core” is selected and click on “Next”. . i) Ensure that “Enable file system caching” is selected and click on “Next”. . j) Click on “Install” . k) Click on “Finish” . | If your “HOME” environment variable is not set (or you don’t know what this is): . a) Open command prompt (Open Start Menu then type cmd and press [Enter]) . b) Type the following line into the command prompt window exactly as shown: setx HOME &quot;%USERPROFILE%&quot; . c) Press [Enter], you should see SUCCESS: Specified value was saved. . | d) Quit command prompt by typing exit then pressing [Enter] . This will provide you with both Git and Bash in the Git Bash program. . macOS . For macOS, install Git for Mac by downloading and running the most recent “mavericks” installer from this list. Because this installer is not signed by the developer, you may have to right click (control click) on the .pkg file, click Open, and click Open on the pop up window. After installing Git, there will not be anything in your /Applications folder, as Git is a command line program. For older versions of OS X (10.5-10.8) use the most recent available installer labelled “snow-leopard” available here. . See the Git installation video tutorial for an example on how to open the Terminal. . Jupyter . We will teach Python using the [Jupyter notebook][jupyter], a programming environment that runs in a web browser. Jupyter requires a reasonably up-to-date browser, preferably a current version of Chrome, Safari, or Firefox (note that Internet Explorer version 9 and below are not supported). Jupyter was installed as part of the Anaconda package for Python. . Test your Setup . To check that this software has installed correctly, open Git bash (or terminal) and type the command: . $ jupyter notebook . You should see a file browser pop up as a new tab on your browser. Select new and you should see Python 3 listed as an option. Clicking on this will create a new Python 3 notebook file. . To start the Python interpreter without the notebook, you can open a terminal or Git Bash and type the command: . $ python .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Introduction.html",
            "relUrl": "/2021/08/02/Introduction.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Data analysis",
            "content": "Data analysis .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/Data_analysis.html",
            "relUrl": "/2021/08/02/Data_analysis.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Variables and assignment",
            "content": "&lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;hr /&gt; &lt;p&gt;Questions:&lt;/p&gt; &lt;ul&gt; . How can I store data in programs?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Objectives:&lt;/p&gt; &lt;ul&gt; . Write programs that assign scalar values to variables and perform calculations with those values.&lt;/li&gt; . Correctly trace value changes in programs that use scalar assignment.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Keypoints:&lt;/p&gt; &lt;ul&gt; . Use variables to store values.&lt;/li&gt; . Use print to display values.&lt;/li&gt; . Variables persist between cells.&lt;/li&gt; . Variables must be created before they are used.&lt;/li&gt; . Variables can be used in calculations.&lt;/li&gt; . Python is case-sensitive.&lt;/li&gt; . Use meaningful variable names.&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Use-variables-to-store-values.&quot;&gt;Use variables to store values.&lt;a class=&quot;anchor-link&quot; href=&quot;#Use-variables-to-store-values.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . Variables are names for values.&lt;/li&gt; . In Python the = symbol assigns the value on the right to the name on the left.&lt;/li&gt; . The variable is created when a value is assigned to it.&lt;/li&gt; . Here, Python assigns an age to a variable age and a name in quotes to a variable first_name.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Ahmed&amp;#39;&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Variable-names&quot;&gt;Variable names&lt;a class=&quot;anchor-link&quot; href=&quot;#Variable-names&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . can only contain letters, digits, and underscore _ (typically used to separate words in long variable names)&lt;/li&gt; . cannot start with a digit&lt;/li&gt; . Variable names that start with underscores like __bobbins_real_age have a special meaning so we won’t do that until we understand the convention.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Use-print-to-display-values.&quot;&gt;Use &lt;code&gt;print&lt;/code&gt; to display values.&lt;a class=&quot;anchor-link&quot; href=&quot;#Use-print-to-display-values.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . Python has a built-in function called print that prints things as text.&lt;/li&gt; . Call the function (i.e., tell Python to run it) by using its name.&lt;/li&gt; . Provide values to the function (i.e., the things to print) in parentheses.&lt;/li&gt; . To add a string to the printout, wrap the string in single or double quotes.&lt;/li&gt; . The values passed to the function are called ‘arguments’&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;years old&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;output_wrapper&quot;&gt; &lt;div class=&quot;output&quot;&gt; &lt;div class=&quot;output_area&quot;&gt; &lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt; &lt;pre&gt;Ahmed is 42 years old . &lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;ul&gt; . print automatically puts a single space between items to separate them.&lt;/li&gt; . And wraps around to a new line at the end.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Variables-must-be-created-before-they-are-used.&quot;&gt;Variables must be created before they are used.&lt;a class=&quot;anchor-link&quot; href=&quot;#Variables-must-be-created-before-they-are-used.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . Unlike some languages, which “guess” a default value, if a variable doesn’t exist yet, or if the name has been mis-spelled, Python reports an error.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;output_wrapper&quot;&gt; &lt;div class=&quot;output&quot;&gt; &lt;div class=&quot;output_area&quot;&gt; &lt;div class=&quot;output_subarea output_text output_error&quot;&gt; &lt;pre&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;&lt;/span&gt; &lt;span class=&quot;ansi-red-fg&quot;&gt;NameError&lt;/span&gt; Traceback (most recent call last) &lt;span class=&quot;ansi-green-fg&quot;&gt;/var/folders/5q/mny3pg2n7h5g21h3v32rfj9wpykqrf/T/ipykernel_792/2256896230.py&lt;/span&gt; in &lt;span class=&quot;ansi-cyan-fg&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt; &lt;span class=&quot;ansi-green-fg&quot;&gt;-&amp;gt; 1&lt;/span&gt;&lt;span class=&quot;ansi-red-fg&quot;&gt; &lt;/span&gt;print&lt;span class=&quot;ansi-blue-fg&quot;&gt;(&lt;/span&gt;last_name&lt;span class=&quot;ansi-blue-fg&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ansi-green-intense-fg ansi-bold&quot;&gt; 2&lt;/span&gt; . NameError: name &#39;last_name&#39; is not defined&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;ul&gt; . The last line of an error message is usually the most informative.&lt;/li&gt; . We will look at error messages in detail later.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Variables-Persist-Between-Cells&quot;&gt;Variables Persist Between Cells&lt;a class=&quot;anchor-link&quot; href=&quot;#Variables-Persist-Between-Cells&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Be aware that it is the order of &lt;strong&gt;execution&lt;/strong&gt; of cells that is important in a Jupyter notebook, not the order in which they appear. Python will remember &lt;strong&gt;all&lt;/strong&gt; the code that was run previously, including any variables you have defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then (re)run cells further up, those defined further down will still be present. As an example, we can create 2 cells with the following content, in this order:&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;p&gt;If you execute this in order, the first cell will give an error. However, if you run the first cell &lt;strong&gt;after&lt;/strong&gt; the second cell it will print out ‘1’. To prevent confusion, it can be helpful to use the &lt;code&gt;Kernel&lt;/code&gt; -&amp;gt; &lt;code&gt;Restart &amp;amp; Run All&lt;/code&gt; option which clears the interpreter and runs everything from a clean slate going top to bottom.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Variables-can-be-used-in-calculations.&quot;&gt;Variables can be used in calculations.&lt;a class=&quot;anchor-link&quot; href=&quot;#Variables-can-be-used-in-calculations.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . We can use variables in calculations just as if they were values.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Age in three years:&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;output_wrapper&quot;&gt; &lt;div class=&quot;output&quot;&gt; &lt;div class=&quot;output_area&quot;&gt; &lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt; &lt;pre&gt;Age in three years: 45 . &lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Python-is-case-sensitive.&quot;&gt;Python is case-sensitive.&lt;a class=&quot;anchor-link&quot; href=&quot;#Python-is-case-sensitive.&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;ul&gt; . Python thinks that upper- and lower-case letters are different, so Name and name are different variables.&lt;/li&gt; . There are conventions for using upper-case letters at the start of variable names so we will use lower-case letters for now.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Use-meaningful-variable-names.&quot;&gt;Use meaningful variable names.&lt;a class=&quot;anchor-link&quot; href=&quot;#Use-meaningful-variable-names.&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;ul&gt; . Python doesn’t care what you call variables as long as they obey the rules (alphanumeric characters and the underscore).&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;input&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;input_area&quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot; highlight hl-ipython3&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flabadab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ewr_422_yY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Ahmed&amp;#39;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ewr_422_yY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flabadab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;years old&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;ul&gt; . Use meaningful variable names to help other people understand what the program does.&lt;/li&gt; . The most important “other person” is your future self.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;hr /&gt; &lt;p&gt;Do &lt;a href=&quot;https://nu-cem.github.io/CompPhys/2021/08/02/02-Variables-Assignment-Qs.html&quot;&gt;the activities&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Back to &lt;a href=&quot;https://nu-cem.github.io/CompPhys/2021/08/02/Python_basics_one.html&quot;&gt;Python basics - part one&lt;/a&gt;.&lt;/p&gt; &lt;hr /&gt; &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/02-Variables-Assignment.html",
            "relUrl": "/2021/08/02/02-Variables-Assignment.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "Variables and assignment - Quick test questions",
            "content": "&lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Swapping-Values&quot;&gt;Swapping Values&lt;a class=&quot;anchor-link&quot; href=&quot;#Swapping-Values&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Fill the table showing the values of the variables in this program &lt;strong&gt;after&lt;/strong&gt; each statement is executed.&lt;/p&gt; &lt;table&gt; . Command Value of x Value of y Value of swap . x = 1.0 | | | | . y = 3.0 | | | | . swap = x | | | | . x = y | | | | . y = swap | | | | . &lt;/table&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;details&gt; &lt;summary&gt; &lt;p&gt;Show answer&amp;lt;/summary&amp;gt;&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Command&lt;/th&gt; &lt;th&gt;Value of x&lt;/th&gt; &lt;th&gt;Value of y&lt;/th&gt; &lt;th&gt;Value of swap&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;x = 1.0&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;td&gt;not defined&lt;/td&gt; &lt;td&gt;not defined&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;y = 3.0&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;td&gt;3.0&lt;/td&gt; &lt;td&gt;not defined&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;swap = x&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;td&gt;3.0&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;x = y&lt;/td&gt; &lt;td&gt;3.0&lt;/td&gt; &lt;td&gt;3.0&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;y = swap&lt;/td&gt; &lt;td&gt;3.0&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;td&gt;1.0&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;These three lines exchange the values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swap&lt;/code&gt; variable for temporary storage. This is a fairly common programming idiom.&lt;br /&gt; &amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Predicting-Values&quot;&gt;Predicting Values&lt;a class=&quot;anchor-link&quot; href=&quot;#Predicting-Values&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;p&gt;What is the final value of &lt;code&gt;position&lt;/code&gt; in the program below? (Try to predict the value without running the program, then check your prediction.)&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;left&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;right&amp;#39;&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;details&gt; &lt;summary&gt; &lt;p&gt;Show answer&amp;lt;/summary&amp;gt;&lt;/p&gt; &lt;p&gt;The final value of position is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&#39;left&#39;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initial&lt;/code&gt; variable is assigned the value ‘left’. In the second line, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position&lt;/code&gt; variable also receives the string value ‘left’. In third line, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initial&lt;/code&gt; variable is given the value ‘right’, but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position&lt;/code&gt; variable retains its string value of ‘left’.&lt;br /&gt; &amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Choosing-a-Name&quot;&gt;Choosing a Name&lt;a class=&quot;anchor-link&quot; href=&quot;#Choosing-a-Name&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Which is a better variable name, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, or &lt;code&gt;minutes&lt;/code&gt;? Why?&lt;/p&gt; &lt;p&gt;Hint: think about which code you would rather inherit from someone who is leaving the lab:&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tot_sec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;details&gt; &lt;summary&gt; &lt;p&gt;Show answer&amp;lt;/summary&amp;gt;&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minutes&lt;/code&gt; is better because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; might mean something like “minimum” (and actually does in Python, but we haven’t seen that yet). &amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;/summary&gt; &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/summary&gt; &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/summary&gt; &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/02-Variables-Assignment-Qs.html",
            "relUrl": "/2021/08/02/02-Variables-Assignment-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "Running Python",
            "content": "&lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;hr /&gt; &lt;h4 id=&quot;Questions:&quot;&gt;Questions:&lt;a class=&quot;anchor-link&quot; href=&quot;#Questions:&quot;&gt; &lt;/a&gt;&lt;/h4&gt; &lt;ul&gt; . How can I run Python programs?&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;Objectives:&quot;&gt;Objectives: &lt;/h4&gt; &lt;ul&gt; . Launch the Jupyter Notebook, create new notebooks, and exit the Notebook.&lt;/li&gt; . Create Markdown cells in a notebook.&lt;/li&gt; . Create and run Python cells in a notebook.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;Keypoints:&quot;&gt;Keypoints: &lt;/h4&gt; &lt;ul&gt; . Python programs are plain text files.&lt;/li&gt; . Use the Jupyter Notebook for editing and running Python.&lt;/li&gt; . Use the keyboard and mouse to select and edit cells.&lt;/li&gt; . The Notebook will turn Markdown into pretty-printed documentation.&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;There-are-multiple-ways-to-run-Python-code&quot;&gt;There are multiple ways to run Python code&lt;a class=&quot;anchor-link&quot; href=&quot;#There-are-multiple-ways-to-run-Python-code&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . Python programmes can be written as plain text files using a text editor&lt;/li&gt; . They have the .py extension to let everyone (including the operating system) know it is a Python program. This is convention, not a requirement. We will use plain text files for writing Python code towards the end of this course.&lt;/li&gt; . For this part of the course we are going to use [Jupyter Notebooks][jupyter].&lt;/li&gt; . The Notebook provides code completion and other helpful features.&lt;/li&gt; . Notebook files have the extension .ipynb to distinguish them from plain-text Python programs.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;You-can-use-the-Jupyter-Notebook-for-editing-and-running-Python.&quot;&gt;You can use the Jupyter Notebook for editing and running Python.&lt;a class=&quot;anchor-link&quot; href=&quot;#You-can-use-the-Jupyter-Notebook-for-editing-and-running-Python.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . When we type jupyter notebook in a terminal (or Git Bash) we start a Jupyter Notebook server and open the default web browser. &lt;/li&gt; . The server runs locally on your machine only and does not use an internet connection.&lt;/li&gt; . You can type code into the browser and see the result when the web page talks to the server.&lt;/li&gt; . This has several advantages:&lt;ul&gt; . You can easily type, edit, and copy and paste blocks of code.&lt;/li&gt; . Tab complete allows you to easily access the names of things you are using and learn more about them.&lt;/li&gt; . It allows you to annotate your code with links, different sized text, bullets, etc. to make it more accessible to you and your collaborators.&lt;/li&gt; . It allows you to display figures next to the code that produces them to tell a complete story of the analysis. The notebook file is stored in a format called JSON.&lt;/li&gt; . Just like a webpage, what’s saved looks different from what you see in your browser.&lt;/li&gt; . But this format allows Jupyter to mix source code, text, and images, all in one file. &lt;/li&gt; &lt;/ul&gt; . | &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;p&gt;&amp;lt;div class=&quot;flash flash-success&quot;&amp;gt; &lt;svg class=&quot;octicon octicon-checklist&quot; viewBox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; width=&quot;16&quot; height=&quot;16&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M2.5 1.75a.25.25 0 01.25-.25h8.5a.25.25 0 01.25.25v7.736a.75.75 0 101.5 0V1.75A1.75 1.75 0 0011.25 0h-8.5A1.75 1.75 0 001 1.75v11.5c0 .966.784 1.75 1.75 1.75h3.17a.75.75 0 000-1.5H2.75a.25.25 0 01-.25-.25V1.75zM4.75 4a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5h-4.5zM4 7.75A.75.75 0 014.75 7h2a.75.75 0 010 1.5h-2A.75.75 0 014 7.75zm11.774 3.537a.75.75 0 00-1.048-1.074L10.7 14.145 9.281 12.72a.75.75 0 00-1.062 1.058l1.943 1.95a.75.75 0 001.055.008l4.557-4.45z&quot;&gt;&lt;/path&gt;&lt;/svg&gt; &lt;strong&gt;Tip: &lt;/strong&gt;You can view this page as a Notebook by clicking on either the &lt;code&gt;Binder&lt;/code&gt; or &lt;code&gt;Colab&lt;/code&gt; button at the top of this page. &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Use-the-keyboard-and-mouse-to-select-and-edit-cells.&quot;&gt;Use the keyboard and mouse to select and edit cells.&lt;a class=&quot;anchor-link&quot; href=&quot;#Use-the-keyboard-and-mouse-to-select-and-edit-cells.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . You can create a new cell by clicking on Insert at the top of the Notebook.&lt;/li&gt; . Pressing the “shift” and the “enter” key together will execute the contents of the cell.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;Use-command-mode-to-speed-things-up&quot;&gt;Use command mode to speed things up &lt;/h3&gt; &lt;ul&gt; . You can also use keyboard shortcuts by entering command mode using the esc key.&lt;/li&gt; . Notice that the border of your cell turns blue.&lt;/li&gt; . Type a shortcut command - for example b to create a new cell.&lt;/li&gt; . The list of shortcuts can be found using h.&lt;/li&gt; . To exit command mode and start editing the cell press enter.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;The-Notebook-will-turn-Markdown-into-pretty-printed-documentation.&quot;&gt;The Notebook will turn Markdown into pretty-printed documentation.&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Notebook-will-turn-Markdown-into-pretty-printed-documentation.&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; . Notebooks can also render [Markdown][markdown] which is a simple plain-text format for writing lists, links, and other things that might go into a web page.&lt;/li&gt; . You can turn cell into a Markdown cell by selecting Markdown from the drop-down menu at the top of the Notebook&lt;/li&gt; . In [ ]: will disappear to show it is no longer a code cell and you will be able to write in Markdown.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Lists&quot;&gt;Lists&lt;a class=&quot;anchor-link&quot; href=&quot;#Lists&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;pre&gt;&lt;code&gt; * Use asterisks * to create * bullet lists.&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; . Use asterisks&lt;/li&gt; . to create&lt;/li&gt; . bullet lists.&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;pre&gt;&lt;code&gt;1. Use numbers 2. to create 3. numbered lists.&lt;/code&gt;&lt;/pre&gt; &lt;ol&gt; . Use numbers&lt;/li&gt; . to create&lt;/li&gt; . numbered lists.&lt;/li&gt; &lt;/ol&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;pre&gt;&lt;code&gt;1. You can 2. also * create sub-lists&lt;/code&gt;&lt;/pre&gt; &lt;ol&gt; . You can&lt;/li&gt; . also&lt;ul&gt; . create sub-lists&lt;/li&gt; &lt;/ul&gt; . | &lt;/ol&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Headings&quot;&gt;Headings&lt;a class=&quot;anchor-link&quot; href=&quot;#Headings&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;pre&gt;&lt;code&gt;# A Level-1 Heading&lt;/code&gt;&lt;/pre&gt; &lt;h1 id=&quot;A-Level-1-Heading&quot;&gt;A Level-1 Heading&lt;a class=&quot;anchor-link&quot; href=&quot;#A-Level-1-Heading&quot;&gt; &lt;/a&gt;&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;pre&gt;&lt;code&gt;## A Level-2 Heading (etc)&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;A-Level-2-Heading-(etc)&quot;&gt;A Level-2 Heading (etc)&lt;a class=&quot;anchor-link&quot; href=&quot;#A-Level-2-Heading-(etc)&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Whitespace&quot;&gt;Whitespace&lt;a class=&quot;anchor-link&quot; href=&quot;#Whitespace&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;pre&gt;&lt;code&gt;Line breaks don&#39;t matter. . But blank lines create new paragraphs.&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Line breaks don’t matter.&lt;/p&gt; &lt;p&gt;But blank lines create new paragraphs.&lt;/p&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h3 id=&quot;Basic-formatting&quot;&gt;Basic formatting&lt;a class=&quot;anchor-link&quot; href=&quot;#Basic-formatting&quot;&gt; &lt;/a&gt;&lt;/h3&gt; &lt;p&gt;You can easily:&lt;/p&gt; &lt;ul&gt; . use italics with *italics*&lt;/li&gt; . use bold with **bold**&lt;/li&gt; . Create links with [...](...).&lt;/li&gt; &lt;/ul&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;hr /&gt; &lt;p&gt;Do &lt;a href=&quot;https://nu-cem.github.io/CompPhys/2021/08/02/01-Running_python-Qs.html&quot;&gt;the activities&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Back to &lt;a href=&quot;https://nu-cem.github.io/CompPhys/2021/08/02/Python_basics_one.html&quot;&gt;Python basics - part one&lt;/a&gt;.&lt;/p&gt; &lt;hr /&gt; &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/01-Running_Python.html",
            "relUrl": "/2021/08/02/01-Running_Python.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "Running python - Quick test questions",
            "content": "&lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Creating-Lists-in-Markdown&quot;&gt;Creating Lists in Markdown&lt;a class=&quot;anchor-link&quot; href=&quot;#Creating-Lists-in-Markdown&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Create a nested list in a Markdown cell in a notebook that looks like this:&lt;/p&gt; &lt;ol&gt; . Get funding.&lt;/li&gt; . Do work.&lt;ul&gt; . Design experiment.&lt;/li&gt; . Collect data.&lt;/li&gt; . Analyze.&lt;/li&gt; &lt;/ul&gt; . | Write up.&lt;/li&gt; . Publish.&lt;/li&gt; &lt;/ol&gt; . &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;details&gt; &lt;summary&gt; &lt;p&gt;Show answer&amp;lt;/summary&amp;gt;&lt;/p&gt; &lt;p&gt;Note that the bullet list is indented 2 spaces so that it is inline with the items of the numbered list.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Get funding. 2. Do work. * Design experiment. * Collect data. * Analyze. 3. Write up. 4. Publish. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;&amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Multiple-Maths&quot;&gt;Multiple Maths&lt;a class=&quot;anchor-link&quot; href=&quot;#Multiple-Maths&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;p&gt;What is displayed when a Python cell in a notebook that contains several calculations is executed? For example, what happens when this cell is executed?&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt; &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; . &lt;/pre&gt; &lt;/div&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;details&gt; &lt;summary&gt; &lt;p&gt;Show answer&amp;lt;/summary&amp;gt;&lt;/p&gt; &lt;p&gt;Python returns the output of the last calculation. The output is:&lt;/p&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; &lt;p&gt;&amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;h2 id=&quot;Equations&quot;&gt;Equations&lt;a class=&quot;anchor-link&quot; href=&quot;#Equations&quot;&gt; &lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Standard Markdown (such as we’re using for these notes) won’t render equations, but the Notebook will. Create a new Markdown cell and enter the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ sum_{i=1}^{N} 2^{-i} approx 1$&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(It’s probably easier to copy and paste.) What does it display? What do you think the underscore, &lt;code&gt;_&lt;/code&gt;, circumflex, &lt;code&gt;^&lt;/code&gt;, and dollar sign, &lt;code&gt;$&lt;/code&gt;, do?&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt; &lt;div class=&quot;inner_cell&quot;&gt; &lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt; &lt;details&gt; &lt;summary&gt; &lt;p&gt;Show answer&amp;lt;/summary&amp;gt;&lt;/p&gt; &lt;p&gt;The notebook shows the equation as it would be rendered from &lt;a href=&quot;&quot;&gt;LaTeX&lt;/a&gt; equation syntax.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The dollar sign, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt;, is used to tell markdown that the text in between is a latex equation.&lt;/li&gt; &lt;li&gt;underscore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;, is used for subscripts&lt;/li&gt; &lt;li&gt;circumflex, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt;, is used for superscripts.&lt;/li&gt; &lt;li&gt;A pair of curly braces, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt;, is used to group text together so that the statement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i=1&lt;/code&gt; becomes the the subscript and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; becomes the superscript.&lt;/li&gt; &lt;li&gt;Similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; is in curly braces to make the whole statement the superscript for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; sum&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; approx&lt;/code&gt; are latex commands for “sum over” and “approximate” symbols.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&lt;/p&gt; &lt;/summary&gt; &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/summary&gt; &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/summary&gt; &lt;/details&gt; &lt;/div&gt; &lt;/div&gt; . &lt;/div&gt; . | | | | | |",
            "url": "https://nu-cem.github.io/CompPhys/2021/08/02/01-Running_Python-Qs.html",
            "relUrl": "/2021/08/02/01-Running_Python-Qs.html",
            "date": " • Aug 2, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This website contains resources for the second year course “Theory, computation and experiment” (KD5081) at Northumbria University, UK. The resources have been developed by Dr Lucy Whalley and the website is powered by Github and fastpages which is licensed under Apache License 2.0. . The content of this website is derived, with permission, from several other sources: . Software Carpentry (in particular, Introduction and Setup) | Code Refinery | . The content of this website is licensed under a Creative Commons Attribution 4.0 International License. You can re-use any of its content as long as the following attribution is included, and you indicate if changes were made. .",
          "url": "https://nu-cem.github.io/CompPhys/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nu-cem.github.io/CompPhys/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}